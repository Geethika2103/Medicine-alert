#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <RTClib.h>
#include <EEPROM.h>

// Create LCD object with I2C address 0x27 and 16 columns, 2 rows
LiquidCrystal_I2C lcd(0x27, 16, 2);
RTC_DS3231 rtc;

int pushVal = 0;  // Track reminder type (1/day, 2/day, 3/day)
int val2;
int addr = 0;
int push1pin = 9;
int push2pin = 8;
int push3pin = 7;
int stopPin = A0;
int screens = 0;
int maxScreen = 2;
bool isScreenChanged = true;
long previousMillis = 0;
long interval = 500;
unsigned long currentMillis;
long previousMillisLCD = 0;
long intervalLCD = 2000;
unsigned long currentMillisLCD;

// Reminder times
int buzz8amHH = 8, buzz8amMM = 0, buzz8amSS = 0;
int buzz2pmHH = 14, buzz2pmMM = 0, buzz2pmSS = 0;
int buzz8pmHH = 20, buzz8pmMM = 0, buzz8pmSS = 0;

void setup() {
    Serial.begin(9600);
    if (!rtc.begin()) {
        Serial.println("Couldn't find RTC");
        while (1);
    }
    if (rtc.lostPower()) {
        Serial.println("RTC lost power, setting time!");
        rtc.adjust(DateTime(2019, 1, 10, 7, 59, 30));
    }
    lcd.begin(16, 2);
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Welcome To");
    lcd.setCursor(0, 1);
    lcd.print("Circuit Digest");
    delay(1000);
    pinMode(push1pin, INPUT);
    pinMode(push2pin, INPUT);
    pinMode(push3pin, INPUT);
    pinMode(stopPin, INPUT);
    pinMode(LED_BUILTIN, OUTPUT);
    delay(200);
    val2 = EEPROM.read(addr);
    if (val2 >= 1 && val2 <= 3) pushVal = val2;
}

void loop() {
    push1();
    push2();
    push3();
    if (pushVal == 1) { at8am(); }
    else if (pushVal == 2) { at8am(); at8pm(); }
    else if (pushVal == 3) { at8am(); at2pm(); at8pm(); }
    
    stopPins();
    changeScreen();
}

void changeScreen() {
    currentMillisLCD = millis();
    if (currentMillisLCD - previousMillisLCD > intervalLCD) {
        previousMillisLCD = currentMillisLCD;
        screens = (screens + 1) % (maxScreen + 1);
        isScreenChanged = true;
    }
    if (isScreenChanged) {
        isScreenChanged = false;
        if (screens == 0) gwsMessage();
        else if (screens == 1) helpScreen();
        else if (screens == 2) timeScreen();
    }
}

void gwsMessage() {
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Stay Healthy :)");
    lcd.setCursor(0, 1);
    lcd.print("Get Well Soon :)");
}

void helpScreen() {
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Press Buttons");
    lcd.setCursor(0, 1);
    lcd.print("for Reminder...!");
}

void timeScreen() {
    DateTime now = rtc.now();
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Time: ");
    lcd.print(now.hour()); lcd.print(":");
    lcd.print(now.minute()); lcd.print(":");
    lcd.print(now.second());
    lcd.setCursor(0, 1);
    lcd.print("Date: ");
    lcd.print(now.day()); lcd.print("/");
    lcd.print(now.month()); lcd.print("/");
    lcd.print(now.year());
}

void push1() {
    if (digitalRead(push1pin) == HIGH) {
        pushVal = 1;
        EEPROM.write(addr, pushVal);
        Serial.println("Reminder set: 1/day");
    }
}

void push2() {
    if (digitalRead(push2pin) == HIGH) {
        pushVal = 2;
        EEPROM.write(addr, pushVal);
        Serial.println("Reminder set: 2/day");
    }
}

void push3() {
    if (digitalRead(push3pin) == HIGH) {
        pushVal = 3;
        EEPROM.write(addr, pushVal);
        Serial.println("Reminder set: 3/day");
    }
}

void stopPins() {
    if (digitalRead(stopPin) == HIGH) {
        pushVal = 0;
        EEPROM.write(addr, pushVal);
        Serial.println("Reminders stopped");
    }
}

void at8am() { checkReminder(buzz8amHH, buzz8amMM, buzz8amSS); }
void at2pm() { checkReminder(buzz2pmHH, buzz2pmMM, buzz2pmSS); }
void at8pm() { checkReminder(buzz8pmHH, buzz8pmMM, buzz8pmSS); }

void checkReminder(int hh, int mm, int ss) {
    DateTime now = rtc.now();
    if (now.hour() == hh && now.minute() == mm && now.second() == ss) {
        buzz();
    }
}

void buzz() {
    digitalWrite(LED_BUILTIN, HIGH);
    delay(500);
    digitalWrite(LED_BUILTIN, LOW);
}